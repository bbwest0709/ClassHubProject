<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.classhubproject.mapper.lecture.LectureMapper">

    <insert id="addInstructor" parameterType="com.example.classhubproject.data.lecture.LectureInstructorAddedRequest">
        INSERT INTO Instructors(user_id, name, field, `text`, user_type, request_status, regdate)
        VALUES (#{userId}, #{name}, #{field},  #{text},  #{userType},  #{requestStatus}, NOW());
    </insert>

    <update id="addUserRole">
        UPDATE User
        SET role = 'INSTRUCTOR'
        WHERE user_id = #{userId};
    </update>

    <insert id="editInstructor" parameterType="com.example.classhubproject.data.lecture.LectureInstructorEditedRequest">
        UPDATE Instructors
        SET user_id=#{userId}, name=#{name}, field=#{field}, `text`=#{text}, user_type=#{userType}, request_status=#{requestStatus}
        WHERE instructors_id=#{instructorsId};
    </insert>

    <insert id="uploadMaterial" parameterType="com.example.classhubproject.data.lecture.LectureMaterialUploadedRequest">
        INSERT INTO Resource(class_id, resource)
        VALUES (#{classId}, #{resource});
    </insert>

    <select id="selectMaterial" resultType="com.example.classhubproject.data.lecture.LectureMaterialUploadedRequest">
        SELECT * FROM Resource WHERE class_id = #{classId}
    </select>

    <update id="editMaterial" parameterType="com.example.classhubproject.data.lecture.LectureMaterialEditedRequest">
        UPDATE Resource
        SET class_detail_id=#{class_detail_id}, resource=#{resource}
        WHERE resource_id=#{resource_id};
    </update>

    <insert id="uploadClass" parameterType="com.example.classhubproject.data.lecture.LectureClassUploadedRequest" useGeneratedKeys="true" keyProperty="classId">
        INSERT INTO Class
        (instructors_id, category_id, class_name, description, summary, price, thumnail, total_video_length, regdate)
        VALUES(#{instructorsId}, #{categoryId}, #{className}, #{description}, #{summary}, #{price}, #{thumnail}, #{totalVideoLength}, NOW());
    </insert>

    <!-- 강의 수정 -->
    <update id="updateClass" parameterType="com.example.classhubproject.data.lecture.LectureClassUploadedRequest">
        UPDATE  Class SET category_id = #{categoryId}, class_name = #{className}, description = #{description},
        summary = #{summary}, price = #{price}, thumnail = #{thumnail}, total_video_length = #{totalVideoLength}, edit_date = NOW()
        WHERE class_id = #{classId};
    </update>


    <!-- class_id로 가격조회 -->
    <select id="getClassPrice" resultType="int">
        SELECT price
        FROM Class
        WHERE class_id = #{classId}
    </select>

    <!-- 영상 등록 -->
    <insert id="addClassVideo" parameterType="com.example.classhubproject.data.lecture.LectureClassDetailDTO">
        INSERT INTO Class_Detail (class_id, title, section_title, video, video_length, regdate)
        VALUES(#{classId}, #{title}, #{sectionTitle}, #{video}, #{videoLength}, NOW());
    </insert>

    <!-- 강의 전체 조회 -->
    <select id="selectAll" resultType="com.example.classhubproject.data.lecture.ClassResponseDTO">
        SELECT c.*, i.name, r.review_score FROM Class c JOIN Instructors i ON c.instructors_id = i.instructors_id
        LEFT JOIN (SELECT class_id, ROUND(AVG(review_score), 1) AS review_score FROM Class_Review GROUP BY class_id) r ON r.class_id = c.class_id
        LIMIT #{startIndex}, #{rowPerPage};
    </select>

    <!-- 강의 키워드 조회 -->
    <select id="selectByKeyword" resultType="com.example.classhubproject.data.lecture.ClassResponseDTO">
        SELECT c.*, COUNT(fc.favorite_class_id) favorite_count

        FROM Class c

                 LEFT JOIN Favorite_Class fc ON c.class_id = fc.class_id
                 JOIN Instructors i ON c.instructors_id = i.instructors_id

        WHERE name LIKE CONCAT('%', #{keyword}, '%')
           OR class_name LIKE CONCAT('%', #{keyword}, '%')
           OR description LIKE CONCAT('%', #{keyword}, '%')
           OR summary LIKE CONCAT('%', #{keyword}, '%')

        GROUP BY c.class_id
        ORDER BY favorite_count DESC, c.regdate DESC
        LIMIT #{startIndex}, #{rowPerPage};
    </select>

    <!-- 강의 1개 조회 -->
    <select id="selectById" resultType="com.example.classhubproject.data.lecture.ClassResponseDTO">
        SELECT c.*, i.name, r.review_score FROM Class c JOIN Instructors i ON c.instructors_id = i.instructors_id
                                                        LEFT JOIN (SELECT class_id, ROUND(AVG(review_score), 1) AS review_score FROM Class_Review GROUP BY class_id) r ON r.class_id = c.class_id
        WHERE c.class_id = #{classId};
    </select>

    <!-- 수정용 강의 1개조회 -->
    <select id="selectByIdForUpdate" resultType="com.example.classhubproject.data.lecture.LectureClassUploadedRequest">
        SELECT * FROM Class WHERE class_id = #{classId};
    </select>

    <!-- 강의 카테고리별 조회 -->
    <select id="selectByCategory" resultType="com.example.classhubproject.data.lecture.ClassResponseDTO">
        SELECT * FROM Class WHERE category_id = #{categoryId}
        LIMIT #{startIndex}, #{rowPerPage};
    </select>

    <!-- 강의 정보 조회 -->
    <select id="getClassInfoByClassId" resultType="classResponse">
        SELECT * FROM Class WHERE class_id = #{classId}
    </select>

    <!-- 관심강의 등록 -->
    <insert id="favoriteLecture">
        INSERT INTO Favorite_Class (user_id, class_id, regdate)
        VALUES (#{userId}, #{classId}, NOW());
    </insert>

    <!-- 관심강의 해제-->
    <delete id="clearFavoriteLecture">
        DELETE FROM Favorite_Class WHERE user_id = #{userId} AND class_id = #{classId};
    </delete>

    <!-- 강의상세정보 목록 -->
    <select id="selectClassDetail" resultType="com.example.classhubproject.data.lecture.LectureClassDetailDTO">
        SELECT * FROM Class_Detail WHERE class_id = #{classId};
    </select>

    <!-- 강의 진행률 정보 불러오기 -->
    <select id="selectLearningData"  resultType="com.example.classhubproject.data.lecture.LearningDataDTO">
        SELECT * FROM Learning_Data WHERE user_id = #{userId} AND class_detail_id = #{classDetailId};
    </select>

    <select id="selectAllLearningData" resultType="com.example.classhubproject.data.lecture.LearningDataDTO">
        SELECT ld.* FROM Learning_Data ld
                             JOIN (SELECT * FROM Class_Detail WHERE class_id = #{classId}) cd ON ld.class_detail_id = cd.class_detail_id
        WHERE user_id = #{userId};
    </select>

    <!-- 러닝 데이터 초기 등록 -->
    <insert id="insertLearningPoint" parameterType="com.example.classhubproject.data.lecture.LearningDataDTO">
        INSERT INTO Learning_Data (user_id, class_detail_id)
        VALUES (#{userId}, #{classDetailId});
    </insert>

    <!-- 러닝 데이터 업데이트 -->
    <update id="updateLearningPoint" parameterType="com.example.classhubproject.data.lecture.LearningDataDTO">
        UPDATE Learning_Data SET video_end_time = #{videoEndTime}, progress_rate = #{progressRate}
        WHERE user_id = #{userId} AND class_detail_id = #{classDetailId};
    </update>

    <!-- 강의 상세 id 받아오기 -->
    <select id="getClassDetailIds">
        SELECT class_detail_id FROM Class_Detail WHERE class_id = #{classId};
    </select>

    <!-- 강의 자료 삭제 -->
    <delete id="deleteMaterial">
        DELETE FROM Resource WHERE class_id = #{classId} AND resource = #{resource};
    </delete>

    <!-- 섹션타이틀 조회 -->
    <select id="selectSectionTitle">
        SELECT section_title FROM Class_Detail WHERE class_id = #{classId} GROUP BY section_title;
    </select>

    <!-- 강의 영상 삭제 -->
    <delete id="deleteClassDetail">
        DELETE FROM Class_Detail WHERE Class_id = #{classId} AND video = #{video};
    </delete>



</mapper>